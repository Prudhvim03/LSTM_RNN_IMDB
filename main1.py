# -*- coding: utf-8 -*-
"""main1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QyKd3b92maiOQkJS5PP0bX6Lh0KkcgCM
"""

# 📦 Step 1: Import Libraries
import numpy as np
import tensorflow as tf
from tensorflow.keras.datasets import imdb
from tensorflow.keras.preprocessing import sequence
from tensorflow.keras.models import load_model
import streamlit as st

# 📖 Step 2: Load IMDB word index
word_index = imdb.get_word_index()
reverse_word_index = {value: key for key, value in word_index.items()}

# 📥 Step 3: Load the trained LSTM model
model = load_model('lstm_rnn_imdb.h5')
max_len = 500

# 🧠 Step 4: Helper Functions
def decode_review(encoded_review):
    return ' '.join([reverse_word_index.get(i - 3, '?') for i in encoded_review])

def preprocess_text(text):
    words = text.lower().split()
    encoded_review = [word_index.get(word, 2) + 3 for word in words]
    padded_review = sequence.pad_sequences([encoded_review], maxlen=max_len)
    return padded_review

def predict_sentiment(review):
    preprocessed_input = preprocess_text(review)
    prediction = model.predict(preprocessed_input, verbose=0)
    sentiment = 'Positive' if prediction[0][0] > 0.5 else 'Negative'
    return sentiment, prediction[0][0]

# 🎨 Step 5: Streamlit Custom UI Setup
st.set_page_config(page_title="🎬 IMDB LSTM Sentiment Classifier", layout="centered")

# 🖌️ Custom CSS for Styling
st.markdown("""
    <style>
    body {
        background-color: #f5f5f5;
    }
    .main {
        background-color: #ffffff;
        padding: 30px;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }
    .footer {
        position: fixed;
        bottom: 10px;
        width: 100%;
        text-align: center;
        color: #888888;
        font-size: 0.85rem;
    }
    </style>
""", unsafe_allow_html=True)

# 📢 App Title and Instructions
st.markdown("<div class='main'>", unsafe_allow_html=True)
st.title('🎬 IMDB Sentiment Classifier using LSTM')
st.subheader("Is your movie review Positive or Negative?")
st.write("Paste your review below and let our LSTM model decide!")

# ✍️ Text Area for Review Input
user_input = st.text_area('📝 Write your movie review here:', height=150, placeholder='E.g., "The movie was mind-blowing and emotional!"')

# 🔘 Classification Button
if st.button('🚀 Classify Sentiment'):
    if user_input.strip():
        sentiment, score = predict_sentiment(user_input)
        st.success(f'🎯 **Sentiment Prediction:** {sentiment}')
        st.info(f'📊 **Model Confidence:** {score:.2f}')
    else:
        st.warning("⚠️ Please enter a valid review first.")
else:
    st.caption("👈 Type your review and hit 'Classify Sentiment'")

# ✨ Designer Credit
st.markdown("</div>", unsafe_allow_html=True)
st.markdown("<div class='footer'>Designed by <strong>Your Name</strong> 🎨</div>", unsafe_allow_html=True)